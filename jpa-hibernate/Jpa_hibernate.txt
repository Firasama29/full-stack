PA / Hibernate

sources
(
	https://vladmihalcea.com/database-table-relationships/
	https://vladmihalcea.com/the-best-way-to-map-a-onetomany-association-with-jpa-and-hibernate/
)

	topics
	--------
		- Hibernate Persistence Context
		- relational mapping
					>> @OneToMany, @ManyToMany, @OneToOne, @ManyToOne
					>> default fetch type for relation mapping
					>> fetchType.Lazy vs fetchType.EAGER
					>> relational directions and mappedBy
					>> @JoinTable, @JoinColumn
					>> Cascade types
				
		- spring.jpa.show-sql=true
		- spring.jpa.properties.hibernate.format_sql=true
		- jpa.hibernate.ddl.auto options
		- logging property
		- spring.profiles.active
		- spring.datasource property
		- javax.persistence VS org.hibernate.annotations
		- first-level cache
		- second-level cache
		- how to enable second-level cache in spring boot project
					
	-------------------------------------------------------------------------------------------------------------------				
				
				
	- Relational Mapping

		- @OneToOne and @ManyToOne have default eager fetchType
		- @ManyToMany and @OneToMany have default lazy fetchType
		
		
		@OneToMany and @ManyToOne
			- two tables are linked based on a foreign key column in a child table which references a primary key of a parent table row
		- You can use @JoinColumn with @OneToOne and @ManyToOne
	
		- mappedBy is required for bidirectional relationships
	
		- @JoinColumn should be used in the target entity that will have the foreign key
	
	
	- spring.jpa.show-sql: true to show ddl in the logs
	
	- spring.jpa.properties.hibernate.format_sql: true to format and pretty print SQL queries
	
	- jpa.hibernate.ddl.auto has multiple options (SEE FILE hibernate_ddl_auto)
	
	- logging: 
		config: classpath:logback/logblack-${spring.profiles.active}.xml
		- make sure you define ${spring.profiles.active} property in application file (SEE BELOW DETAILS FOR profile property
		- make sure to create a logback file based on each profile
		
	- spring.profiles.active
		- the value should be set as follows:
			>> in application.yaml or application.properties: 	local
			>> in helm/values.yaml:								dev
			>> in helm/values-uat.yaml:							uat
			>> in helm/values-sit.yaml: 						sit
			>> in helm/values-prod.yaml:						prod

		
	- javax.persistence VS org.hibernate.annotations:
		> javax.persistence is provided by JPA, while org.hibernate.annotations is from Hibernate
		
		> annotations and attributes
		--------------------------------------------------------------------------------------------------------
			JPA																Hibernate
		--------------------------------------------------------------------------------------------------------
		* annotations	
			@Cascade
				- CascadeType(enum)
					- ALL
					- PERSIST
					- MERGE
					- REMOVE
					- REFRESH
					- DELETE
					- SAVE_UPDATE
					- REPLICATE
					- LOCK
					- DETACH
					
			@Column
				- name
				- unique(boolean)
				- nullable(boolean)
				- insertable(boolean)
				- updatable(boolean)
				- columnDefinition
				- table
				- length
				- precision(int)
				- scale(int)
				
			@Embeddable (for class)
			
			@Embedded	(for field or property)
			
			@EmbeddedId
			
			@Entity (name)
			
			@Enumerated
				- value = EnumType.ORDINAL
				- value = EnumType.STRING
			
			@Table
			
			@OneToMany (default LAZY)
				- cascade
				- fetch = FetchType.EAGER or FetchType.LAZY
				- mappedBy
			
			@OneToOne (default EAGER)
				- cascade
				- fetch = FetchType.EAGER or FetchType.LAZY
				- mappedBy
				- orphanRemoval
			
			@ManyToMany (default LAZY)
				- cascade
				- fetch = FetchType.EAGER or FetchType.LAZY
				- mappedBy
			
			@ManyToOne (default EAGER)
				- cascade
				- fetch = FetchType.EAGER or FetchType.LAZY
			
			@JoinColumn
				- name
				- referencedColumnName
				- unique(boolean)
				- nullable(boolean)
				- insertable(boolean)
				- updatable(boolean)
				- columnDefinition
				- table
			
			@JoinTable(name, schema, joinColumns, inverseJoinColumns, foreignKey)
			
			@GeneratedValue
				- strategy
					- GenerationType.AUTO
					- GenerationType.IDENTITY
					- GenerationType.TABLE
					- GenerationType.SEQUENCE
				- generator
			
			@Id
			
		
		* attributes
			FetchType 			(enum -> LAZY or EAGER)
			joinColumns 		(for @JoinTable)
			inverseJoinColumns 	(for @JoinTable)
			foreignKey 			(for @JoinTable)
			strategy			(for @GeneratedValue)
			generator			(for @GeneratedValue)
			
			
			
			
			
			@GenericGenerator
				- name
				- strategy
			@GenericGenerators
				- GenericGenerator
				
	---------------------------------------------------------------------------------------
	- first level cache in hibernate
		> It's the Persistence Context
		> In JPA it's represented by EntityManager and in Hibernate it's represented by Session
		> Hibernate enables it by default for entities within a session
		> is used to optimize communication with database by reducing database round-trips
		> 
	---------------------------------------------------------------------------------------
	- how to enable second-level cache in spring boot project
		1 > in application.properties, add the following property:
			spring.jpa.properties.hibernate.cache.user_second_level_cache=true
		
		2 > specify caching framework
			spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory
		
		3 > In Entity class, add @Cacheable annotation
Jpa_hibernate.txt
Displaying Jpa_hibernate.txt.
