docker
sources
(
	https://docs.docker.com/storage/volumes/
	https://www.freecodecamp.org/news/docker-mount-volume-guide-how-to-mount-a-local-directory/
)

		topics:
		- reasons applications may run on one machine but not in another
		- features of docker containers
		- what are virtual machines
		- difference between containers and virtual machines
		- docker archeticture (client - server)
		- how docker packages an application
		- how to run java without installation
		- how to run commands from a container inside another container
		- how to run database using docker
		- mounting local directories to docker container using volumes
		- how to manage volumes
		- docker volumes
		- how to run database using docker container
		- how to run database using Dockerfile
		- how to display an html in the browser file using nginx container 
		- how to use Dockerfile to build an image
		- difference between RUN, CMD and ENTRYPOINT
		- difference between ADD and COPY
		- how to run postgres container
		- how to run a spring boot app using docker container
		- how to use docker compose
		- how to run an application using node container
		- how to persist postgres data after container is removed
		- how to connect app container with db container
		- how to reference environment variables from an external file in docker-compose.yaml
----------------------------------------------------------------------------------------------------------

	> reasons applications may run on one machine but not in another:
		- different configutation settings
		- one or more files are missing
		- software version mismatch
		
    ------------------------------------------    
	> features of docker containers
		- packages an application and all its dependencies so it can be run anywhere in isolated manner
		- containerized apps can work the same way in any environment on any machine so no setup and 
		  configuration are not required
		- we can remove an app with all its dependencies in one go	

    ------------------------------------------
	> difference between containers and virtual machines
	-------------------------------------------------------------------------------------------------------------------------------------------
	virtual machine														container
	-------------------------------------------------------------------------------------------------------------------------------------------
	- an abstraction of a machine								- isolated environment for running an application
	
	- virtualizes physical hardware								- virtualizes operating system
	
	- multiple VMs can be run in one physical machine, each running  			- multiple containers can run with multiple applications		
	  an application with different version of same software                      		and different versions of the same software
	  using hypervisor							
	  
	- hypervisor is a software used to create & manage virtual machines			- uses docker daemon
	
	- examples of hypervisor (VirtualBox, VMware, Hyper-v)
	
	- each virtual machine needs full copy of an operating system				- containers share the same OS
	
	- slow to start										- container can start quickly
	
	- resource intensive because each VM takes physical machine's resources			- more lightweight than virtual machines bcs they share the 	
	like cpu, memory and disk space								same operating system
	  											  
	
    ------------------------------------------
	> docker archeticture (client - server)
	
	client	-> CLI you interact with
	
	server	-> docker engine (docker daemon in the background)
	
	- you run a CLI, and it communicates with docker daemon to do processes like start or stop a container etc

    ------------------------------------------                                        	
	> how docker packages an application
		- create a Dockerfile inside an application
		- Dockerfile contains instructions for docker to package the application and all its files into a docker image
		- A docker image contains everything that an application needs to run
					>>>> cut-down OS
					>>>> runtime-environment
					>>>> application files
					>>>> third party libraries
					>>>> environment variables
					>>>> we start a container using that image

    ------------------------------------------				
	> how to go inside an a shell using docker?
		- docker run -it image_name sh
		- you will have access to the features of that image provider
		- for example, for ubuntu image, you will be able to use ubuntu OS features throw that image
												
    ------------------------------------------
	> how to connect to a running container
		- make sure the target container is running
		- use command 	docker exec <container_id> or <container_name> bash or ls
	
    ------------------------------------------
	> how to run database using docker
	
    ------------------------------------------
	> how to run nginx image and display it on browser:
		- use command docker run -p 8080:80 nginx, which pulls nginx image and maps port 8080 to the container's port 80
		- docker sends a request to the container
		- the container returns a response and docker displays it on the browser
		- now nginx server has started and is accessible in the browser with port 8080
		
   ------------------------------------------		
	> mounting local directories to docker container using volumes
	  - why do we need volumes?
	  	>> docker containers are immutable by nature. Meaning that once a container restarts, all data stored in that container will be erased
	  	>> docker solves this problem with volume mounts, which is a mechanism for persisting data in a docker container
	  	>> we can mount local directories using docker -v
	  	>> the -v parameter is used to bind your local directory to the container
	  	
   ------------------------------------------
   	> how to manage volumes? below are commands used to manage volumes
   		- create a docker volume		docker volume create volume_name
   		- list volumes				docker volume ls
   		- inspect a volume			docker volume inspect volume_name
   		- remove a volume			docker volume rm volume_name
   		- run a container with a volme		docker run --name my_container -v ${PWD}:/my-vol <image>:tag
   		
   		
   ------------------------------------------
   	> how to run database using docker container
   	   > POSTGRES: docker run --name <container_name> -e POSTGRES_PASSWORD=<password> -p 5432:5432 -d postgres:tag
   	   . MYSQL:					  	
	
	
   -----------------------------------------
	> how to display an html in the browser file using nginx container
	NOTE: this is useful if we want to test a web application and show it on the browser
		- create a directory and create an html file inside it
		- create a Dockerfile in the same directory with the following directives
			FROM nginx:tag (for example, nginx:alpine)
			COPY . /usr/share/nginx/html
		- build an image
		- start a container that publishes to port 80 of the container using command
				docker run -v ${PWD}:/usr/share/nginx/html -p 8080:80 -d nginx
		- go to http://localhost:8080/<your_html_file.html
		
    ------------------------------------------	
	> how to use Dockerfile to build an image
		NOTE: building our custom image from a Dockerfile is useful when we want to store our application in the container 
		so that when we create a container from that image, our application will be available through that container
		
		- Create a Dockerfile
		- Specify the directives that you want. examples:
			>> FROM <base_image>					>>>>> specifies the base image for your image
			>> RUN mkdir <my_folder>; \				>>>>> RUN in this example executes multiple commands. It creates a folder
					cd <my_folder>; \				>>>>> here we're moving inside that folder
					echo "hello" > file.txt;		>>>>> here we're creating a text file and inserting a text inside it
			>> WORKDIR	<my_folder>					>>>>> here we're specifying the current working directory
			>> COPY MyClass.java .					>>>>> this will copy files that you specify into current directory ( . )
			>> RUN	javac MyClass.java				>>>>> here the java class will be executed during image creation
			>> CMD java MyClass					>>>>> this command will be executed when a container is created
	
		
    -----------------------------------------		
	> difference between RUN, CMD and ENTRYPOINT		
		- RUN command gets executed when building the image, CMD gets executed when creating a container
    
    
    -----------------------------------------	
	> difference between ADD and COPY
		both COPY and ADD can be used to copy local file to the image, but ADD is useful for zip files, jar files, etc
	
	
    -----------------------------------------		
	> how to run postgres container
		run command 	> docker run --name <container_name> -e POSTGRES_PASSWORD=<password> -p 5432:5432 -d postgres:tag
		
	
    -----------------------------------------		
	> how to run an application using node container
		steps to run an application using node container:
			- create a project
			- create a Dockerfile. Inside it, specify the following directives
				FROM node				<< base image
				MKDIR app				<< create a directory
				COPY . /app				<< copy all files of your application to the directory inside the container
				WORKDIR /app				<< go inside the directory of the container
				RUN npm install				<< run this command when building the image
				EXPOSE 80				<< expose container port to our local machine so we can access the container
				CMD ["node", "app.js"]			<< CMD will be executed when container is created
	
	
    -----------------------------------------		
